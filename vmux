#!/usr/bin/env python3.5
# -*- coding: utf-8 -*-
# vmux
#  Vim/Neovim sessions with the help of tmux
#
# Depends: tmux, vim/nvim
#
# Copyright (C) 2016 Jan Christoph Ebersbach
#
# http://www.e-jc.de/
#
# All rights reserved.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


import os
import subprocess
import sys

DEBUG = os.environ.get('VMUX_DEBUG')

class Editor(object):
	def __init__(self, vmux):
		self._vmux = vmux

	@property
	def realdeditor(self):
		return os.path.expandvars(os.path.expanduser(os.environ.get('VMUX_REALEDITOR_%s' % self.cmd.upper(),
				os.path.sep + os.path.join('usr', 'bin', self.cmd))))

	@classmethod
	def get_default_editor(cls, editors):
		default_editor = os.environ.get('VMUX_EDITOR', Neovim.cmd)
		for e in editors:
			if e.cmd == default_editor:
				return e


class Vim(Editor):
	cmd = 'vim'

	def __init__(self, vmux):
		Editor.__init__(self, vmux)

	@property
	def session_exists(self):
		if not self._vmux.session:
			return False
		for server in subprocess.check_output([self.realdeditor, '--serverlist']).decode('utf-8').strip().split(os.linesep):
			if server.upper() == self._vmux.session.upper():
				return True
		return False

	def open(self, args):
		stripped_sep = False
		if args[0] == '--':
			args.pop(0)
			stripped_sep = True
		if args and not stripped_sep and args[0].startswith('-'):
			return subprocess.call([self.realdeditor, '--servername',
				self._vmux.session.upper(), *args])
		else:
			return subprocess.call([self.realdeditor, '--servername',
				self._vmux.session.upper(), '--remote-silent', *args])

	def new(self, args, new_session=True):
		cmd = [self.realdeditor]
		if new_session:
			self._vmux.new_session()
			cmd += ['--servername', self._vmux.session]
		os.execvp(self.realdeditor, cmd + args)


class Gvim(Vim):
	cmd = 'gvim'

	def __init__(self, vmux):
		Vim.__init__(self, vmux)


class Neovim(Editor):
	cmd = 'nvim'

	def __init__(self, vmux):
		self._session_dir = None
		Editor.__init__(self, vmux)

	@property
	def session_dir(self):
		if not self._session_dir:
			self._session_dir = os.path.expandvars(os.path.expanduser(
				os.environ.get('VMUX_NVIM_SESSION_DIR',
					os.path.join(os.environ.get('HOME'), '.cache', 'nvim_sessions'))))
		return self._session_dir

	@property
	def session_exists(self):
		if not self._vmux.session:
			return False
		return os.path.exists(self.session_address)

	@property
	def session_address(self):
		return os.path.join(self.session_dir, self._vmux.session)

	def open(self, args):
		if args[0] == '--':
			args.pop(0)
		from neovim import attach
		nvim = attach('socket', path=self.session_address)
		for f in args[::-1]:
			nvim.command('e %s' % os.path.abspath(os.path.expandvars(os.path.expanduser(f))))

	def new(self, args, new_session=True):
		if new_session:
			self._vmux.new_session()
		env = {}
		env.update(os.environ)
		if new_session:
			env.update({'NVIM_LISTEN_ADDRESS': self.session_address})
		cmd = [self.realdeditor] + args
		if DEBUG:
			print(' '.join(cmd))
			print(env)
		os.execve(self.realdeditor, cmd, env)


class Vmux(object):
	def __init__(self):
		if not os.environ.get('TMUX'):
			raise ValueError('No tmux session found')
		self._id = None
		self._pane_id = None
		self._session = None
		self._global = None
		self._shall_select_pane = None
		self._shall_select_global_pane = None

	@property
	def shall_select_pane(self):
		if self._shall_select_pane is None:
			self._shall_select_pane = not bool(os.environ.get('VMUX_NOT_SELECT_PANE'))
		return self._shall_select_pane

	@property
	def id(self):
		if not self._id:
			self._id = subprocess.check_output(['tmux', 'display-message', '-p', '#S']).decode('utf-8').strip()
		return self._id

	@property
	def pane_id(self):
		if not self._pane_id:
			self._pane_id = os.environ.get('TMUX_PANE')
		return self._pane_id

	@property
	def is_global(self):
		if self._global is None:
			self._global = bool(os.environ.get('VMUX_GLOBAL'))
		return self._global

	@property
	def session_var(self):
		if self.is_global:
			return 'VMUX_SESSION'
		return 'VMUX_SESSION_%s' % self.id

	@property
	def session(self):
		if not self._session:
			# first try to identify the session from the environment variable
			self._session = os.environ.get(self.session_var)
		if not self._session:
			# if the environment didn't produce any result, generate a new
			# session name
			self._session = 'vmux%s' % ('-global' if self.is_global else '_%s' % self.pane_id[1:])
		return self._session

	def destroy_session(self):
		cmd = ['tmux', 'set-environment', '-u']
		if self.is_global:
			cmd.append('-g')
		cmd.append(self.session_var)
		if DEBUG:
			print(' '.join(cmd))
		subprocess.call(cmd)
		self._session = None
		self._global = None

	def new_session(self):
		cmd = ['tmux', 'set-environment']
		if self.is_global:
			cmd.append('-g')
		cmd.extend((self.session_var, self.session))
		if DEBUG:
			print(' '.join(cmd))
		subprocess.call(cmd)

	def select_pane(self):
		if self.is_global:
			# can't select a global session since it doesn't store the pane id
			return
		cmd = ('tmux', 'list-panes', '-a', '-F', '#{session_id} #{window_id} #D')
		if DEBUG:
			print(' '.join(cmd))
		session_pane_id = self.session.replace('vmux_', '')
		for line in subprocess.check_output(cmd).decode('utf-8').split(os.linesep):
			ids = line.split()
			if len(ids) != 3:
				continue
			if ids[0][1:] == self.id and ids[2][1:] == session_pane_id:
				cmd = ('tmux', 'select-window', '-t', ids[1])
				if DEBUG:
					print(' '.join(cmd))
				subprocess.call(cmd)
				cmd = ('tmux', 'select-pane', '-t', ids[2])
				if DEBUG:
					print(' '.join(cmd))
				subprocess.call(cmd)
				break


def main():
	v = None
	try:
		v = Vmux()
	except ValueError:
		# ignore errofr, just start the default editor without any session
		pass
	editors = [Neovim(v), Vim(v), Gvim(v)]

	if not v:
		default_editor = Editor.get_default_editor(editors)
		if not default_editor:
			print('Unable to find editor %s' % default_editor, file=sys.stderr)
			return 3
		return default_editor.new(sys.argv[1:], new_session=False)

	# open files in an existing session
	if len(sys.argv) >= 2:
		for e in editors:
			if e.session_exists:
				if v.shall_select_pane:
					v.select_pane()
				return e.open(sys.argv[1:])

	# session name exists but there is no corresponding session
	if v.session:
		v.destroy_session()

	# start a new session
	default_editor = Editor.get_default_editor(editors)
	if not default_editor:
		print('Unable to find editor %s' % default_editor, file=sys.stderr)
		return 3
	return default_editor.new(sys.argv[1:])


if __name__ == "__main__":
	sys.exit(main())
